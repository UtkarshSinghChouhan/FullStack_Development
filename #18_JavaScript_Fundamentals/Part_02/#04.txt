The precedence and associativity of operators in JavaScript determine the order in which 
operators are evaluated when multiple operators are used in a single expression. 
Understanding these concepts is crucial for writing code that behaves as expected and
avoids unexpected results or errors.

Operator Precedence:

- Operator precedence defines the order in which operators are evaluated in an expression.
- Operators with higher precedence are evaluated before operators with lower precedence.
- When in doubt, use parentheses to explicitly control the order of evaluation.

Common examples of operator precedence:

- Multiplication and division have higher precedence than addition and subtraction.
- Comparison operators have lower precedence than arithmetic operators.
- Assignment operators have lower precedence than most other operators.


Operator Associativity:

- Operator associativity determines the order in which operators of the same precedence are evaluated.
- It can be left-to-right (left-associative) or right-to-left (right-associative).
- For operators with the same precedence and the same associativity, they are evaluated in the order they appear from left to right.

Common examples of operator associativity:

- Arithmetic operators (e.g., addition, subtraction) are left-associative.
- Assignment operators (e.g., =) are right-associative.


Importance of Understanding Precedence and Associativity:

- Correctness: Understanding precedence and associativity helps ensure that your expressions are evaluated correctly.
Incorrect operator order can lead to bugs or unintended behavior.
- Readability: Code with explicit and well-understood precedence and associativity is more readable and less prone to misunderstanding.
- Optimization: Knowing the order of evaluation can help you write more efficient code by avoiding unnecessary parentheses or excessive calculations.
- Debugging: Understanding precedence and associativity can assist in debugging and identifying issues in complex expressions.