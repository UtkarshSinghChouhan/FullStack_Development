localStorage and sessionStorage are both web storage
APIs provided by modern web browsers. They allow 
developers to store key-value pairs locally in the 
user's browser. While they serve similar purposes, 
they have some differences in terms of persistence 
and scope.

localStorage:
    Purpose: localStorage is designed for persistent 
    storage of data across browser sessions. Data 
    stored using localStorage remains available even 
    after the browser is closed and reopened.

    Usage: Developers can use localStorage to store 
    settings, preferences, or other data that should 
    persist across multiple visits to a website.

    // Storing data in localStorage
    localStorage.setItem('username', 'JohnDoe');
    localStorage.setItem('theme', 'dark');

    // Retrieving data from localStorage
    const username = localStorage.getItem('username');
    console.log(username); // Output: JohnDoe

    // Removing data from localStorage
    localStorage.removeItem('theme');

sessionStorage:
    Purpose: sessionStorage is intended for storing 
    data for the duration of a single browsing 
    session. Data stored using sessionStorage is 
    available only as long as the browser or tab 
    remains open.

    Usage: Developers can use sessionStorage to store 
    temporary information or data that is only 
    relevant for the current session.


    // Storing data in sessionStorage
    sessionStorage.setItem('cartTotal', '50');
    sessionStorage.setItem('loggedIn', 'true');

    // Retrieving data from sessionStorage
    const cartTotal = sessionStorage.getItem('cartTotal');
    console.log(cartTotal); // Output: 50

    // Clearing sessionStorage
    sessionStorage.clear();


Both localStorage and sessionStorage have similar 
methods for storing, retrieving, and removing data 
(setItem, getItem, removeItem). They provide a 
convenient way for web developers to manage 
client-side data without relying on server-side 
storage solutions. However, developers should be 
mindful of the data they store, especially sensitive 
information, as it is accessible to anyone who can access the user's browser.



